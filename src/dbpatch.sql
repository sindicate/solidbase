
--*	PATCHES

--*		// De init patch creeert tabellen voor de patchtool zelf
--*		INIT "" --> "INIT"

--*		// hier beginnen de echte patches
--*		PATCH OPEN "INIT" --> "3.0.1"

--*	/PATCHES







--* INIT "" --> "INIT"

--* // Check old style version
ASSERT EXISTS MESSAGE 'Expecting old style version 2.0.15'
SELECT *
FROM TTS.VERSION_CONTROL
WHERE VERS_CONT_ID = 'VERSION'
AND VERS_REG_NUM = 'DHL TTS 2.0.15'
GO

--* // DROP TRIGGER TTS.DBVERSIONLOG_AUTONUMBER;
--* // DROP TABLE TTS.DBVERSION;
--* // DROP TABLE TTS.DBVERSIONLOG;
--* // DROP SEQUENCE TTS.DBVERSIONLOG_SEQUENCE;

--* // Create version control table
CREATE TABLE TTS.DBVERSION
( 
	VERSION VARCHAR2(20) NOT NULL, 
	TARGET VARCHAR2(20), 
	STATEMENTS NUMBER(4) NOT NULL 
)
GO

--* // Create version control log table sequence generator
CREATE SEQUENCE TTS.DBVERSIONLOG_SEQUENCE
GO

--* // Create version control log table
CREATE TABLE TTS.DBVERSIONLOG
(
	ID NUMBER(6) NOT NULL, -- An index might be needed here to let the identity perform
	SOURCE VARCHAR2(20),
	TARGET VARCHAR2(20) NOT NULL,
	STATEMENT NUMBER(4) NOT NULL,
	STAMP DATE NOT NULL,
	COMMAND VARCHAR2(4000),
	RESULT VARCHAR2(4000)
)
GO

--* // Create version control log table autonumber trigger
CREATE OR REPLACE TRIGGER TTS.DBVERSIONLOG_AUTONUMBER BEFORE INSERT ON TTS.DBVERSIONLOG
REFERENCING NEW AS NEWROW
FOR EACH ROW
BEGIN
	IF :NEWROW.ID IS NULL THEN
		SELECT TTS.DBVERSIONLOG_SEQUENCE.NEXTVAL INTO :NEWROW.ID FROM DUAL;
	END IF;
END;
GO

--* // Insert the first version
INSERT INTO TTS.DBVERSION ( VERSION, TARGET, STATEMENTS )
VALUES ( 'INIT', NULL, 6  )
GO

--* /INIT







--* PATCH "INIT" --> "3.0.1"

--* SET USER tts_datamart

--* MESSAGE START 'Dropping table TTS_DATAMART.CUM_TRANSIT_TIMES'
DROP TABLE TTS_DATAMART.CUM_TRANSIT_TIMES
GO

--* SET USER tts

--* MESSAGE START 'Dropping table TTS.GEOGROUP'
DROP TABLE TTS.GEOGROUP
GO

--* MESSAGE START 'Creating table TTS.LPG_TARGETS'
CREATE TABLE TTS.LPG_TARGETS
(
	LAPG_ID NUMBER(15) NOT NULL,
	LPGT_DOW NUMBER(1) NOT NULL,
	LPGT_TARGET NUMBER(2),
	LPGT_AM_PM CHAR(1),
	LPGT_PICKUP DATE,
	LPGT_SYSPROP_TARGET NUMBER(2),
	LPGT_SYSPROP_AM_PM CHAR(1),
	LPGT_SYSPROP_PICKUP DATE,
	CONSTRAINT LPGT_PK PRIMARY KEY ( LAPG_ID, LPGT_DOW ),
	CONSTRAINT LPGT_FK_LAPG FOREIGN KEY ( LAPG_ID ) REFERENCES TTS.LANE_PRODUCT_GROUPS ( LAPG_ID ),
	CONSTRAINT LPGT_CHECK_DOW CHECK ( LPGT_DOW IN ( 1, 2, 3, 4, 5, 6, 7 ) )
)
GO

--* MESSAGE START 'Dropping unused columns from STATIONS'
ALTER TABLE TTS.STATIONS
DROP ( MUST_WIN, WE_INBOUND, WE_OUTBOUND, WE_ECX )
GO

--* MESSAGE START 'Creating table TTS.PROPOSAL_TARGETS'
CREATE TABLE TTS.PROPOSAL_TARGETS
(
	PROP_ID NUMBER(15) NOT NULL,
	PROT_DOW NUMBER(1) NOT NULL,
	PROT_TARGET NUMBER(2),
	PROT_AM_PM CHAR(1),
	PROT_PICKUP DATE,
	CONSTRAINT PROT_PK PRIMARY KEY ( PROP_ID, PROT_DOW ),
	CONSTRAINT PROT_FK_PROP FOREIGN KEY ( PROP_ID ) REFERENCES TTS.PROPOSALS ( PROP_ID ),
	CONSTRAINT PROT_DOW_CHECK CHECK ( PROT_DOW IN ( 1, 2, 3, 4, 5, 6, 7 ) )
)
GO

--* MESSAGE START 'Creating table TTS.SHIPMENT_COUNTS'
CREATE TABLE TTS.SHIPMENT_COUNTS
(
	LAPG_ID NUMBER(15) NOT NULL,
	PU_DAY_OF_WEEK NUMBER(1) NOT NULL,
	TIME_ID NUMBER(4) NOT NULL,
	ADJUSTED_TRANSIT_TIME NUMBER(2) NOT NULL,
	AM_PM_DELIVERY CHAR(1) NOT NULL,
	SHIPMENT_COUNT NUMBER(4) NOT NULL,
	CONSTRAINT SHIC_FK_LAPG FOREIGN KEY ( LAPG_ID ) REFERENCES TTS.LANE_PRODUCT_GROUPS ( LAPG_ID ),
	CONSTRAINT SHIC_FK_TIME FOREIGN KEY ( TIME_ID ) REFERENCES TTS.TIMEBANDS ( TIME_ID ),
	CONSTRAINT SHIC_CHECK_DOW CHECK ( PU_DAY_OF_WEEK IN ( 1, 2, 3, 4, 5, 6, 7 ) ),
	CONSTRAINT SHIC_CHECK_TRANSIT_TIME CHECK ( ADJUSTED_TRANSIT_TIME > 0 ),
	CONSTRAINT SHIC_CHECK_AM_PM CHECK ( AM_PM_DELIVERY IN ( 'A', 'P' ) ),
	CONSTRAINT SHIC_CHECK_COUNT CHECK ( SHIPMENT_COUNT > 0 )
)
GO

CREATE INDEX TTS.SHIC_FK_LAPG ON TTS.SHIPMENT_COUNTS ( LAPG_ID )
GO

CREATE INDEX TTS.SHIC_FK_TIME ON TTS.SHIPMENT_COUNTS ( TIME_ID )
GO

--* MESSAGE START 'Creating table TTS.USER_SETTINGS'
CREATE TABLE TTS.USER_SETTINGS
(
	USES_ID NUMBER(6) NOT NULL,
	USER_ID NUMBER(6) NOT NULL,
	USES_KEY VARCHAR2(40) NOT NULL,
	USES_VALUE VARCHAR2(100),
	USES_SEQUENCE NUMBER(4),
	USES_BLOB BLOB,
	CONSTRAINT USES_PK PRIMARY KEY ( USES_ID ),
	CONSTRAINT USES_FK_USER FOREIGN KEY ( USER_ID ) REFERENCES TTS.USERS ( USER_ID )
)
GO

CREATE INDEX TTS.USES_FK_USER ON TTS.USER_SETTINGS ( USER_ID )
GO

--* MESSAGE START 'Adding columns AM_PM_DELIVERY and PU_DAY_OF_WEEK to TARGET_EXPORT'
ALTER TABLE TTS.TARGET_EXPORT ADD
(
	AM_PM_DELIVERY CHAR(1) NOT NULL,
	PU_DAY_OF_WEEK NUMBER(1) NOT NULL
)
GO

--* MESSAGE START 'Creating table TTS.COMMODITIES'
CREATE TABLE TTS.COMMODITIES
(
	COMM_CODE VARCHAR2(1) NOT NULL,
	COMM_DESCRIPTION VARCHAR2(1) NOT NULL,
	CONSTRAINT COMM_PK PRIMARY KEY ( COMM_CODE )
)
GO

CREATE UNIQUE INDEX TTS.COMM_DESCRIPTION ON TTS.COMMODITIES ( COMM_DESCRIPTION )
GO

--* MESSAGE START 'Fixing datatype of COUNTRIES.COUN_ID'
ALTER TABLE TTS.COUNTRIES RENAME COLUMN COUN_ID TO COUN_ID_OLD
GO

ALTER TABLE TTS.COUNTRIES ADD ( COUN_ID NUMBER(6) )
GO

UPDATE TTS.COUNTRIES SET COUN_ID = COUN_ID_OLD
GO

ALTER TABLE TTS.COUNTRIES MODIFY ( COUN_ID NOT NULL )
GO

ALTER TABLE TTS.COUNTRIES DROP ( COUN_ID_OLD ) CASCADE CONSTRAINTS
GO

CREATE UNIQUE INDEX TTS.COUN_PK ON TTS.COUNTRIES ( COUN_ID )
GO

ALTER TABLE TTS.COUNTRIES ADD ( CONSTRAINT COUN_PK PRIMARY KEY ( COUN_ID ) USING INDEX )
GO

ALTER TABLE TTS.APPROVAL_PROCESS ADD ( CONSTRAINT APPP_FK_COUN_ORIG FOREIGN KEY ( COUN_ID_ORIGIN ) REFERENCES TTS.COUNTRIES ( COUN_ID ) )
GO

ALTER TABLE TTS.APPROVAL_PROCESS ADD ( CONSTRAINT APPP_FK_COUN_DEST FOREIGN KEY ( COUN_ID_DEST ) REFERENCES TTS.COUNTRIES ( COUN_ID ) )
GO

ALTER TABLE TTS.STATIONS ADD ( CONSTRAINT STAT_FK_COUN FOREIGN KEY ( COUN_ID ) REFERENCES TTS.COUNTRIES ( COUN_ID ) )
GO

ALTER TABLE TTS.USERS ADD ( CONSTRAINT USER_FK_COUN FOREIGN KEY ( COUN_ID ) REFERENCES TTS.COUNTRIES ( COUN_ID ) )
GO

ALTER TABLE TTS.USER_COUNTRIES ADD ( CONSTRAINT USEC_FK_COUN FOREIGN KEY ( COUN_ID ) REFERENCES TTS.COUNTRIES ( COUN_ID ) )
GO

--* MESSAGE START 'Creating table TTS.DELAYS_COMMODITY'
CREATE TABLE TTS.DELAYS_COMMODITY
(
	COUN_ID NUMBER(6) NOT NULL,
	COMM_CODE VARCHAR2(1) NOT NULL,
	DELC_DELAY NUMBER(1) NOT NULL,
	CONSTRAINT DELC_PK PRIMARY KEY ( COUN_ID, COMM_CODE ),
	CONSTRAINT DELC_FK_COUN FOREIGN KEY ( COUN_ID ) REFERENCES TTS.COUNTRIES ( COUN_ID ),
	CONSTRAINT DELC_FK_COMM FOREIGN KEY ( COMM_CODE ) REFERENCES TTS.COMMODITIES ( COMM_CODE ),
	CONSTRAINT DELC_CHECK_DELAY CHECK ( DELC_DELAY > 0 )
)
GO

CREATE INDEX TTS.DELC_FK_COMM ON TTS.DELAYS_COMMODITY ( COMM_CODE )
GO

--* MESSAGE START 'Creating table TTS.DELAYS_WEIGHT_ORIG'
CREATE TABLE DELAYS_WEIGHT_ORIG
(
	COUN_ID NUMBER(6) NOT NULL,
	DEWO_START NUMBER(1) NOT NULL,
	DEWO_END NUMBER(1),
	DEWO_DELAY NUMBER(1) NOT NULL,
	CONSTRAINT DEWO_PK PRIMARY KEY ( COUN_ID, DEWO_START ),
	CONSTRAINT DEWO_FK_COUN FOREIGN KEY ( COUN_ID ) REFERENCES TTS.COUNTRIES ( COUN_ID ),
	CONSTRAINT DEWO_CHECK_DELAY CHECK ( DEWO_DELAY > 0 )
)
GO

--* MESSAGE START 'Creating table TTS.DELAYS_WEIGHT_DEST'
CREATE TABLE DELAYS_WEIGHT_DEST
(
	COUN_ID NUMBER(6) NOT NULL,
	DEWD_START NUMBER(1) NOT NULL,
	DEWD_END NUMBER(1),
	DEWD_DELAY NUMBER(1) NOT NULL,
	CONSTRAINT DEWD_PK PRIMARY KEY ( COUN_ID, DEWD_START ),
	CONSTRAINT DEWD_FK_COUN FOREIGN KEY ( COUN_ID ) REFERENCES TTS.COUNTRIES ( COUN_ID ),
	CONSTRAINT DEWD_CHECK_DELAY CHECK ( DEWD_DELAY > 0 )
)
GO

--* MESSAGE START 'Creating table TTS.DELAYS_VALUE_DEST'
CREATE TABLE DELAYS_VALUE_DEST
(
	COUN_ID NUMBER(6) NOT NULL,
	DEVD_START NUMBER(1) NOT NULL,
	DEVD_END NUMBER(1),
	DEVD_DELAY NUMBER(1) NOT NULL,
	CONSTRAINT DEVD_PK PRIMARY KEY ( COUN_ID, DEVD_START ),
	CONSTRAINT DEVD_FK_COUN FOREIGN KEY ( COUN_ID ) REFERENCES TTS.COUNTRIES ( COUN_ID ),
	CONSTRAINT DEVD_CHECK_DELAY CHECK ( DEVD_DELAY > 0 )
)
GO

--* MESSAGE START 'Creating table TTS.DELAYS_POSTCODE_ORIG'
CREATE TABLE DELAYS_POSTCODE_ORIG
(
	STAT_ID NUMBER(10) NOT NULL,
	DEPO_POSTCODE VARCHAR2(6) NOT NULL,
	DEPO_DELAY NUMBER(1) NOT NULL,
	CONSTRAINT DEPO_PK PRIMARY KEY ( STAT_ID, DEPO_POSTCODE ),
	CONSTRAINT DEPO_FK_STAT FOREIGN KEY ( STAT_ID ) REFERENCES TTS.STATIONS ( STAT_ID ),
	CONSTRAINT DEPO_CHECK_DELAY CHECK ( DEPO_DELAY > 0 )
)
GO

--* MESSAGE START 'Creating table TTS.DELAYS_POSTCODE_DEST'
CREATE TABLE DELAYS_POSTCODE_DEST
(
	STAT_ID NUMBER(10) NOT NULL,
	DEPD_POSTCODE VARCHAR2(6) NOT NULL,
	DEPD_DELAY NUMBER(1) NOT NULL,
	CONSTRAINT DEPD_PK PRIMARY KEY ( STAT_ID, DEPD_POSTCODE ),
	CONSTRAINT DEPD_FK_STAT FOREIGN KEY ( STAT_ID ) REFERENCES TTS.STATIONS ( STAT_ID ),
	CONSTRAINT DEPD_CHECK_DELAY CHECK ( DEPD_DELAY > 0 )
)
GO

--* MESSAGE START 'Increasing the sequence cachesizes'
ALTER SEQUENCE TTS.SEQ_APPP CACHE 100 NOMAXVALUE
GO

ALTER SEQUENCE TTS.SEQ_COUN CACHE 10 NOMAXVALUE
GO

ALTER SEQUENCE TTS.SEQ_DHLB NOCACHE NOMAXVALUE
GO

ALTER SEQUENCE TTS.SEQ_LAPG CACHE 1000 NOMAXVALUE
GO

ALTER SEQUENCE TTS.SEQ_LOGD CACHE 10 NOMAXVALUE
GO

ALTER SEQUENCE TTS.SEQ_PROA CACHE 100 NOMAXVALUE
GO

ALTER SEQUENCE TTS.SEQ_PROP CACHE 100 NOMAXVALUE
GO

ALTER SEQUENCE TTS.SEQ_REGI NOCACHE NOMAXVALUE
GO

ALTER SEQUENCE TTS.SEQ_STAT CACHE 10 NOMAXVALUE
GO

ALTER SEQUENCE TTS.SEQ_USER NOCACHE NOMAXVALUE
GO

--* MESSAGE START 'Fixing the start value of the SEQ_APPP sequence'
DECLARE
	LL_MAX INTEGER;
	LL_CURR INTEGER;
BEGIN
	SELECT MAX( APPP_ID ) INTO LL_MAX FROM TTS.APPROVAL_PROCESS;
	SELECT SEQ_APPP.NEXTVAL INTO LL_CURR FROM DUAL;
	IF LL_MAX > LL_CURR THEN
		EXECUTE IMMEDIATE 'ALTER SEQUENCE TTS.SEQ_APPP INCREMENT BY ' || ( LL_MAX - LL_CURR );
		SELECT TTS.SEQ_APPP.NEXTVAL INTO LL_CURR FROM DUAL;
		EXECUTE IMMEDIATE 'ALTER SEQUENCE TTS.SEQ_APPP INCREMENT BY 1';
	END IF;
END;
GO

--* MESSAGE START 'Transferring data from LANE_PRODUCT_GROUPS to LPG_TARGETS'
DECLARE
	ID_MIN TTS.LANE_PRODUCT_GROUPS.LAPG_ID%TYPE;
	ID_MAX TTS.LANE_PRODUCT_GROUPS.LAPG_ID%TYPE;
BEGIN
	SELECT MIN( LAPG_ID ), MAX( LAPG_ID )
	INTO ID_MIN, ID_MAX
	FROM TTS.LANE_PRODUCT_GROUPS;
	
	WHILE ID_MIN <= ID_MAX LOOP

		INSERT INTO TTS.LPG_TARGETS ( LAPG_ID, LPGT_DOW, LPGT_TARGET, LPGT_AM_PM, LPGT_PICKUP, LPGT_SYSPROP_TARGET, LPGT_SYSPROP_AM_PM, LPGT_SYSPROP_PICKUP )
		SELECT LAPG.LAPG_ID, DOW.DOW, LAPG.DHL_TARGET, 'P', LAPG.PICKUP_CUTOFF, LAPG.SYST_PROPOSED_TARGET, 'P', LAPG.SYST_PROPOSED_PICKUP_CUTOFF
		FROM TTS.LANE_PRODUCT_GROUPS LAPG,
			 ( SELECT 1 DOW FROM DUAL UNION ALL SELECT 2 FROM DUAL UNION ALL SELECT 3 FROM DUAL UNION ALL SELECT 4 FROM DUAL UNION ALL SELECT 5 FROM DUAL UNION ALL SELECT 6 FROM DUAL UNION ALL SELECT 7 FROM DUAL ) DOW
		WHERE LAPG_ID BETWEEN ID_MIN AND ID_MIN + 9999
		AND ( LAPG.DHL_TARGET IS NOT NULL OR LAPG.PICKUP_CUTOFF IS NOT NULL OR LAPG.SYST_PROPOSED_TARGET IS NOT NULL OR LAPG.SYST_PROPOSED_PICKUP_CUTOFF IS NOT NULL )
		ORDER BY LAPG_ID, DOW.DOW;

		COMMIT;

		ID_MIN := ID_MIN + 10000;

	END LOOP;

END;
GO

--* MESSAGE START 'Transferring data from PROPOSALS to PROPOSAL_TARGETS'
DECLARE
	ID_MIN TTS.PROPOSALS.PROP_ID%TYPE;
	ID_MAX TTS.PROPOSALS.PROP_ID%TYPE;
BEGIN
	SELECT MIN( PROP_ID ), MAX( PROP_ID )
	INTO ID_MIN, ID_MAX
	FROM TTS.PROPOSALS;
	
	WHILE ID_MIN <= ID_MAX LOOP

		INSERT INTO TTS.PROPOSAL_TARGETS ( PROP_ID, PROT_DOW, PROT_TARGET, PROT_AM_PM, PROT_PICKUP )
		SELECT PROP.PROP_ID, DOW.DOW, PROP.PROP_DHL_TARGET, 'P', PROP.PROP_PICKUP_CUTOFF
		FROM TTS.PROPOSALS PROP,
			 ( SELECT 1 DOW FROM DUAL UNION ALL SELECT 2 FROM DUAL UNION ALL SELECT 3 FROM DUAL UNION ALL SELECT 4 FROM DUAL UNION ALL SELECT 5 FROM DUAL UNION ALL SELECT 6 FROM DUAL UNION ALL SELECT 7 FROM DUAL ) DOW
		WHERE PROP_ID BETWEEN ID_MIN AND ID_MIN + 9999
		ORDER BY PROP_ID, DOW.DOW;

		COMMIT;

		ID_MIN := ID_MIN + 10000;

	END LOOP;

END;
GO

--* MESSAGE START 'Adding column LAPG_MONTH_IMPORTED to LANE_PRODUCT_GROUPS'
ALTER TABLE TTS.LANE_PRODUCT_GROUPS
ADD ( LAPG_MONTH_IMPORTED NUMBER(6) )
GO

--* MESSAGE START 'Dropping columns from LANE_PRODUCT_GROUPS'
ALTER TABLE TTS.LANE_PRODUCT_GROUPS
DROP ( DHL_TARGET, PICKUP_CUTOFF, SYST_PROPOSED_TARGET, SYST_PROPOSED_PICKUP_CUTOFF )
GO

--* MESSAGE START 'Dropping columns from PROPOSALS'
ALTER TABLE TTS.PROPOSALS
DROP ( PROP_DHL_TARGET, PROP_PICKUP_CUTOFF, OLD_DHL_TARGET, OLD_PICKUP_CUTOFF )
GO

--* /PATCH
