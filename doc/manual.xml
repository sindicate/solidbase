<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook V5.0//EN" "../tools/docbook/docbook-5.0b5.dtd">

<book xmlns="http://docbook.org/ns/docbook">

	<info>
		<title>Database Patch Tool User's Manual</title>
		<subtitle>A tool to manage the controlled upgrade of database structures</subtitle>
		<author><personname>Ren√© M. de Bloois</personname></author>
		<productname>Database Patch Tool</productname>
	</info>

	<chapter xml:id="audience">
		<title>Audience</title>

		<para>
			TODO Audience &amp; why use the patchtool
		</para>
				
	</chapter>

	<chapter xml:id="concept">
		<title>Concept</title>
		
		<section xml:id="database-structure-and-versions">
			<title>Database structure and versions</title>
			
			<para>
				An application needs a database with a certain defined structure.
				This structure is defined by the database objects (like tables, views, indexes, constraints, stored procedures and triggers) and fixed reference data that is needed by the application.
				This structure evolves over time.
				There are multiple versions of the database structure.
				The patchtool's function is to track this version and make it possible to transform the database structure from one version to the next version while maintaining the data contained.
				A transformation from one version to another happens by executing a series of change scripts (called patches).
				A patch transforms the database structure from one version to the next by executing a series of database changes and patch mode settings.
			</para>
			
		</section>
		
		<section xml:id="changes-vs-settings">
			<title>Database changes vs. patch mode settings</title>
			
			<para>
				Below are examples of database changes and patch mode settings.
			</para>
			
			<itemizedlist>
				<title>Examples of database changes</title>
				<listitem><para><computeroutput>CREATE TABLE ...</computeroutput></para></listitem>
				<listitem><para><computeroutput>CREATE INDEX ...</computeroutput></para></listitem>
				<listitem><para><computeroutput>ALTER TABLE ADD COLUMN ...</computeroutput></para></listitem>
				<listitem><para><computeroutput>INSERT &lt;reference data, for example countries&gt;</computeroutput></para></listitem>
				<listitem><para><computeroutput>UPDATE &lt;data to conform with the changed data model&gt;</computeroutput></para></listitem>
			</itemizedlist>
			
			<para>
				Database changes form the meat of the patch. They change the structure/configuration of the database and the fixed reference data in it.
			</para>
			
			<itemizedlist>
				<title>Examples of patch mode settings</title>
				<listitem><para><computeroutput>--* SET USER &lt;username&gt;</computeroutput></para></listitem>
				<listitem><para><computeroutput>--* SET MESSAGE "&lt;message&gt;"</computeroutput></para></listitem>
			</itemizedlist>
			
			<para>
				Patch mode settings change the mode of operation of the patchtool.
				Patch mode settings are reset at the start of each individual patch.
				You can also mark SQL as being a patch mode setting:
			</para>
			
<programlisting>--* SESSIONCONFIG
ALTER SESSION ...
--* /SESSIONCONFIG</programlisting>

			<para>
				This changes the mode of the current connection to the database. 
			</para>
			
			<para>
				All patch commands are described in <xref linkend="patchtool-commands"/>.
			</para>
			
			<para>
				The next section explains why the distinction between changes and settings is important.
			</para>
			
		</section>
		
		<section xml:id="patch-failure-and-recovery">
			<title>Patch failure and recovery</title>
			
			<para>
				Database changes are permanent and should not be repeated.
				Patch mode settings are not permanent and must be repeated in case of a patch restart.
				So there are some differences between changes on the one hand and settings on the other with respect to patch failure and restart:
			</para>
			
			<para>
				When a patch failure occurs the patchtool remembers what patch was being executed and how many database changes were successful.
				After fixing the cause of the failure the patchtool can be restarted and it will skip all database changes that were already executed successfully.
				Patch mode settings however do not behave like this. 
				Patch mode settings should always be executed from the beginning of each patch.
				Because of this, patch mode settings are not counted, which means that they do not interfere with counting of the number of successful database changes.
			</para>
			
		</section>

		<section xml:id="extending-patches">
			<title>Extending patches</title>
			
			<para>
				During development, changes on the databases come unexpected and often.
				This may result in a lot of patches and a quickly growing version number.
				If you don't want this you can keep the patch open.
				An open patch can be executed but the bump to the new version number will not happen.
				New changes to the database can be added to the end of this patch, they will automatically be picked up when someone re-executes the patch.
				When the time comes to officially deliver the patch for execution on a test, acceptance or production database, you can close the patch. 
			</para>
			
			<para>
				See <xref linkend="open-patches" /> for details on how to do this.
			</para>
			
		</section>
		
	</chapter>
	
	<chapter xml:id="starting-the-patchtool">
		<title>Starting the patchtool</title>

		<section xml:id="starting-with-jave">
			<title>Starting with java</title>
			
			<para>
				The patchtool is started with the following command:
				<programlisting>java -jar dbpatcher.jar</programlisting>
				This will start the interactive mode of the patchtool, 
				which will present the user with some choices regarding the database and application, the target version, 
				and will ask the user for passwords when needed. 
			</para>
			
			<example><title>Example interactive mode</title>
<screen><![CDATA[C:\PROJECTS\BUILDS\dbpatcher\dist>java -jar dbpatcher.jar
20-1-09 20:47   DBPatcher v1.0.101
20-1-09 20:47   (C) 2006-2008 R.M. de Bloois, LogicaCMG

20-1-09 20:47   Available database:
20-1-09 20:47       prod (DHL Production)
20-1-09 20:47       test (test)
20-1-09 20:47   Select a database from the above: prod

20-1-09 20:47   Available applications in database 'prod':
20-1-09 20:47       app1 (app1 description)
20-1-09 20:47       app2 (app2)
20-1-09 20:47   Select an application from the above: app1

20-1-09 20:47   Connecting to database 'prod', application 'app1'...
20-1-09 20:47   Input password for user 'sa':
20-1-09 20:47   The database has no version yet.
20-1-09 20:47   Opening patchfile 'C:\PROJECTS\BUILDS\dbpatcher\dist\dbpatch-hsqldb-example.sql'
20-1-09 20:47       Encoding is 'ISO-8859-1'
20-1-09 20:47   Possible targets are: 1.0.1, 1.0.2
20-1-09 20:47   Input target version: 1.0.2
20-1-09 20:47   Patching "null" to "1.0.1"
20-1-09 20:47   Creating table DBVERSION.
20-1-09 20:47   Creating table DBVERSIONLOG.
20-1-09 20:47   Patching "1.0.1" to "1.0.2"
20-1-09 20:47   Creating table USERS.
20-1-09 20:47   Inserting admin user.
20-1-09 20:47   The database has been patched.

20-1-09 20:47   Current database version is "1.0.2".

C:\PROJECTS\BUILDS\dbpatcher\dist>]]></screen>
			</example>
			
		</section>

		<section xml:id="classpath-extension">
			<title>Classpath extension</title>
			
			<para>
				Normally, you need to add jar files to the patchtool's classpath.
				These jar files will be jdbc drivers needed to access the database, but you can add any jar file you want.
				There are 2 ways to add jar files to the classpath:
			</para>
			
			<itemizedlist>
				<listitem><para>
					By configuring the following property in the dbpatcher.properties file:
					<programlisting>classpathext = ojdbc14.jar;derby-10.2.1.6.jar</programlisting>
					<note><para>Currently, this does not work when the <code>-driver</code> option is specified on the command line, as the complete property file is skipped in that case.</para></note>
				</para></listitem>
				<listitem><para>
					By adding the jar files to the -cp option when starting java:
					<programlisting>java -cp dbpatcher.jar;ojdbc14.jar;derby-10.2.1.6.jar ronnie.dbpatcher.Main</programlisting>
					As you see, you need to start the patch tool specifying the Main class instead of the jar.
				</para></listitem>
			</itemizedlist>

		</section>

		<section xml:id="commandline-options">
			<title>Commandline options</title>
			
			<para>
				Following is the output of the
				<programlisting>java -jar dbpatcher.jar -help</programlisting>
				command:
			</para>
			
<screen><![CDATA[usage: dbpatcher [-driver <classname>] [-dumplog <filename>] [-fromant]
       [-password <password>] [-patchfile <patchfile>] [-target <targetversion>]
       [-url <url>] [-username <username>] [-verbose]
 -driver <classname>       sets the jdbc driverclass
 -dumplog <filename>       export historical patch results to an xml file
 -fromant                  adds newlines after input requests
 -password <password>      sets the password of the default username
 -patchfile <patchfile>    sets the patch file
 -target <targetversion>   sets the target version
 -url <url>                sets the url of the database
 -username <username>      sets the default username to patch with
 -verbose                  be extra verbose]]></screen>
 
 			<para>
 				The <code>-driver</code>, <code>-url</code> and <code>-username</code> options always go together. You must specify them all, or none at all.
 				When the <code>-driver</code> option is specified the configuration files will be ignored.
 				The given username is also the username which will be used to find the <code>DBVERSION</code> and the <code>DBVERSIONLOG</code> tables.
 			</para>
 			
 			<example>
 				<title>Command line examples</title>
				<screen>java -jar dbpatcher.jar</screen>
 				<para>Starts the patchtool in interactive mode. All configuration is read from the <code>dbpatcher.properties</code>.</para>
<screen>java -cp dbpatcher.jar;ojdbc14.jar ronnie.dbpatcher.Main 
  -driver oracle.jdbc.OracleDriver 
  -url jdbc:oracle:thin:@hostname:1521:dbname 
  -username rene</screen>
 				<para>Starts the patchtool in interactive mode for the given database and user. The <code>dbpatcher.properties</code> is ignored.</para>
<screen>java -cp dbpatcher.jar;ojdbc14.jar ronnie.dbpatcher.Main 
  -driver oracle.jdbc.OracleDriver 
  -url jdbc:oracle:thin:@hostname:1521:dbname 
  -username rene -password geheim 
  -patchfile oracle-patch.sql -target 2.0.*</screen>
 				<para>Patches the given database to the last version that start with 2.0. The <code>dbpatcher.properties</code> is ignored.</para>
 <screen>java -cp dbpatcher.jar;ojdbc14.jar ronnie.dbpatcher.Main 
   -driver oracle.jdbc.OracleDriver 
   -url jdbc:oracle:thin:@hostname:1521:dbname 
   -username rene -dumplog upgrade.log</screen>
 				<para>Dumps the patch log of the given database. The <code>dbpatcher.properties</code> is ignored.</para>
 			</example>
 			
		</section>
		
	</chapter>
	
	<chapter xml:id="configuring-the-patchtool">
		<title>Configuring the patchtool</title>

		<section xml:id="configuration-files">
			<title>Configuration files</title>
			
			<para>
				A configuration file is used to configure the classpath and one or more database and applications.
				If more than one database is configured the patchtool user will get the opportunity to select one.
				If more than one application is configured within the selected database the user will get the opportunity to select one of the applications.
			</para>
			
			<para>
				If only one database and application is configured, no selection is needed.
				The patchtool will immediately try to connect to the database, after which the user will get the opportunity to select a target version to patch to. 
			</para>
			
			<para>
				There are 2 configuration files:
			</para>
			
			<itemizedlist>
				<listitem>
					<para>
						The internal /ronnie/dbpatcher/config/dbpatcher-default.properties;
					</para>
				</listitem>
				<listitem>
					<para>
						dbpatcher.properties in the working folder.
					</para>
				</listitem>
			</itemizedlist>
			
			<para>
				The dbpatcher.properties overrides properties in the dbpatcher-default.properties. This makes it possible to instrument the jar file with default settings.
			</para>
			
			<example><title>Example configuration</title>
<programlisting><![CDATA[# Specifies which version of the config should be used, 1 is old, 2 is the newest
config-version = 2

# Specifies jars to be added to the classpath
classpathext = ojdbc14.jar;derby-10.2.1.6.jar;hsqldb.jar

# databases
databases = prod, test

# database 'prod'
prod.description = DHL Production
prod.driver = org.hsqldb.jdbcDriver
prod.url = jdbc:hsqldb:mem:test1
prod.applications = app1, app2

# database 'prod', application 'app1'
prod.app1.description = app1 description
prod.app1.user = sa
prod.app1.patchfile = dbpatch-hsqldb-example.sql

# database 'prod', application 'app2'
prod.app2.user = sa
prod.app2.patchfile = dbpatch-hsqldb-example.sql

# database 'test'
test.driver = org.apache.derby.jdbc.EmbeddedDriver
test.url = jdbc:derby:c:/projects/temp/dbpatcher/db;create=true
test.applications = app3

# database 'test', application 'app3'
test.app3.user = app
test.app3.patchfile = dbpatch-derby-example.sql]]></programlisting>
			</example>
		
			<table border="1">
				<caption>Configuration details</caption>
				<tr>
					<th>Property</th>
					<th>Possible values</th>
					<th>Description</th>
				</tr>
				<tr>
					<td>config-version</td>
					<td>1 or 2</td>
					<td>Specifies which version of the configuration you like to use</td>
				</tr>
				<tr>
					<td>classpathext</td>
					<td>list of jarfiles seperated by ;</td>
					<td>Specifies which jars need to be added at the end of the classpath</td>
				</tr>
				<tr>
					<td>databases.config.class</td>
					<td>classname</td>
					<td>Specifies a class which will replace the normal databases configuration.</td>
				</tr>
				<tr>
					<td>databases.config.script</td>
					<td>script filename</td>
					<td>Specifies a script which will replace the normal databases configuration. Currently, only .groovy files are supported.</td>
				</tr>
				<tr>
					<td>databases</td>
					<td>comma-seperated list of database names</td>
					<td>Specifies which databases are available to be patched</td>
				</tr>
				<tr>
					<td>&lt;dbname&gt;.description</td>
					<td></td>
					<td>Description for this database</td>
				</tr>
				<tr>
					<td>&lt;dbname&gt;.driver</td>
					<td></td>
					<td>Driverclass needed to connect to this database</td>
				</tr>
				<tr>
					<td>&lt;dbname&gt;.url</td>
					<td></td>
					<td>Url that points to this database</td>
				</tr>
				<tr>
					<td>&lt;dbname&gt;.applications</td>
					<td>comma-seperated list of applications in this database</td>
					<td>Specifies which applications are available in this database</td>
				</tr>
				<tr>
					<td>&lt;dbname&gt;.&lt;appname&gt;.description</td>
					<td></td>
					<td>Description for this application</td>
				</tr>
				<tr>
					<td>&lt;dbname&gt;.&lt;appname&gt;.user</td>
					<td></td>
					<td>User needed to connect to this application</td>
				</tr>
				<tr>
					<td>&lt;dbname&gt;.&lt;appname&gt;.patchfile</td>
					<td></td>
					<td>Patchfile to upgrade this application</td>
				</tr>
			</table>
			
		</section>

		<section xml:id="using-external-databases-configuration">
			<title>Using external databases configuration</title>
			
			<para>
				It is possible to replace the normal databases configuration in dbpatcher.properties with an external class or script.
			</para>
			
			<section xml:id="configuring-databases-with-external-class">
				<title>Configuring databases with an external class</title>
				
				<para>
					You need to add a class to the classpath which extends the following interface:
				</para>
				
<programlisting><![CDATA[package ronnie.dbpatcher.config;
public interface DatabasesConfiguration
{
    void init( Configuration configuration );
    List< Database > getDatabases();
}]]></programlisting>

				<example><title>Example databases configuration class</title>
<programlisting><![CDATA[package somePackage;

import ronnie.dbpatcher.config.Configuration;
import ronnie.dbpatcher.config.Database;
import ronnie.dbpatcher.config.DatabasesConfiguration;

public class CustomDatabasesConfiguration implements DatabasesConfiguration
{
    protected List< Database > databases;

    public void init( Configuration configuration )
    {
        // You can read configuration from the dbpatcher.properties like this: 
        String test = configuration.getProperty( "databases.config.test" );
        
        this.databases = new ArrayList();
        Database database = new Database( "<name>", "<description or null>", 
                "<driver>", "<url>" );
        database.addApplication( "<name>", "<description or null>", 
                "<username>", "<patchfile>" );
        this.databases.add( database );
    }

    public List< Database > getDatabases()
    {
        return this.databases;
    }
}]]></programlisting>
				</example>

				<para>
					The class is configured like this:
				</para>

<programlisting><![CDATA[config-version = 2
classpathext = ojdbc14.jar
databases.config.class = somepackage.CustomDatabasesConfiguration
databases.config.test = value to be read by the databases configuration class]]></programlisting>

			</section>
			
			<section xml:id="configuring-databases-with-external-script">
				<title>Configuring databases with an external script</title>
				
				<para>
					You need to create a script like this:
				</para>
				
				<example>
					<title>Example databases configuration script</title>
<programlisting><![CDATA[// This is a groovy script called: databasesconfig.groovy

import ronnie.dbpatcher.config.Database;

// You can read configuration from the dbpatcher.properties like this: 
def test = configuration.getProperty( "databases.config.test" );

def result = []; // Creates a java.util.List
def database = new Database( "<name>", "<description or null>", 
        "<driver>", "<url>" );
database.addApplication( "<name>", "<description or null>", 
        "<username>", "<patchfile>" );
result.add( database );

return result; // Will be picked up by the patchtool
]]></programlisting>
				</example>

				<para>
					The script is configured like this:
				</para>

<programlisting><![CDATA[config-version = 2
classpathext = ojdbc14.jar
databases.config.script = databasesconfig.groovy
databases.config.test = value to be read by the databases configuration class]]></programlisting>

			</section>
			
		</section>

	</chapter>
	
	<chapter xml:id="maintaining-the-patch">
		<title>Maintaining the patch</title>

		<section xml:id="your-first-patchfile">
			<title>Your first patchfile</title>
			
			<example>
				<title>Example patch file</title>
				<para>Below an example of a patchfile:</para>
			</example>
			
<programlisting><![CDATA[--* ENCODING "UTF-8"

--* // ========================================================================

--*	PATCHES
--*     PATCH "" --> "1.0.1"
--*     PATCH "1.0.1" --> "1.0.2"
--*	/PATCHES

(7 empty lines recommended)

--* // ========================================================================
--* PATCH "" --> "1.0.1"
--* // ========================================================================

--* SET MESSAGE "Creating table DBVERSION"

CREATE TABLE DBVERSION
( 
    VERSION VARCHAR, 
    TARGET VARCHAR, 
    STATEMENTS INTEGER NOT NULL 
)
GO

--* // The patch tool expects to be able to use the DBVERSION table
--* // after the *first* sql statement

--* SET MESSAGE "Creating table DBVERSIONLOG"

CREATE TABLE DBVERSIONLOG
(
    ID INTEGER IDENTITY, -- An index might be needed
    SOURCE VARCHAR,
    TARGET VARCHAR NOT NULL,
    STATEMENT VARCHAR NOT NULL,
    STAMP TIMESTAMP NOT NULL,
    COMMAND VARCHAR,
    RESULT VARCHAR
)
GO

--* // The existence of DBVERSIONLOG will automatically be detected
--* // at the end of this patch

--* /PATCH

(7 empty lines recommended)

--* // ========================================================================
--* PATCH "1.0.1" --> "1.0.2"
--* // ========================================================================

--* SET MESSAGE "Creating table USERS"

CREATE TABLE USERS
(
    USER_ID INT IDENTITY,
    USER_USERNAME VARCHAR NOT NULL,
    USER_PASSWORD VARCHAR NOT NULL
)
GO

--* SET MESSAGE "Inserting admin user"

INSERT INTO USERS ( USER_USERNAME, USER_PASSWORD )
VALUES ( 'admin', '0DPiKuNIrrVmD8IUCuw1hQxNqZc=' )
GO

--* /PATCH

--* // ========================================================================]]></programlisting>
			
			<para>
				Lines starting with <code>--*</code> are patchtool commands.
				Lines starting with <code>--* //</code> are patchtool comments. Such comments are not sent to the database.
				The rest of the lines represent in most cases normal SQL.
			</para>
			
			<para>
				The patchfile may optionally start with a character encoding.
				If the encoding is not specified, the patch tool tries to detect the encoding from the BOM (Byte Order Mark, the first 2, 3 or 4 bytes of the file).
				BOMs for UTF-16BE, UTF-16LE and UTF-8 are recognized. UTF-32 is not yet recognized.
				If no BOM is present, ISO-8859-1 is used.
			</para>
			
			<para>
				The patchfile starts with a header that defines the patches that are available in the body of the patchfile.
				In the header it is also possible to mark a specific patch as <code>OPEN</code>, <code>BRANCH</code> or <code>RETURN</code>.
				See <xref linkend="open-patches" /> and <xref linkend="maintaining-branches" />.
			</para>
			
			<para>
				A patch consists of a sequence of SQL statements and patchtool commands.
				Statements are considered to be database changes and are sent to the database.
				Patchtool commands are considered to be patch mode settings and are interpreted by the patchtool.
			</para>
			
			<para>
				When the patch is supposed to be executed on a clean database or an existing database created without the patchtool you need the first initial patch from the example.
				This patch creates the tables required by the patchtool, namely <code>DBVERSION</code> and <code>DBVERSIONLOG</code>.
				Oracle, MySQL, Derby and HSQLDB versions of this initial patch are available. 
			</para>
			
		</section>
		
		<section xml:id="patchfile-lookup">
			<title>Patchfile lookup</title>

			<para>
				The patchtool first looks for the patchfile in the classpath.
				If it is not found, it will try to find it in the current working folder.			
			</para>
						
		</section>
		
		<section xml:id="patchtool-commands">
			<title>Patchtool commands</title>
			
			<para>
				This section describes the various patchtool commands available.
			</para>
			
			<section xml:id="set-message">
				<title><code>--* SET MESSAGE "&lt;message&gt;"</code></title>
				
				<para>
					Sets a message that will be shown to the user.
					You would normally set a message just before a couple of database changes to describe to the user what is happening next.
				</para>
				
				<para>
					A message set in this way is not immediately shown.
					It is shown when the patchtool executes a database change and then cleared so that it is only shown once.
					There is a possibility that a message is not shown, because it is overwritten by another <code>SET MESSAGE</code> before a database change is executed.
					This technique is used to facilitate patch restart after a patch failure.
					When a patch is restarted, messages for which all database changes are skipped should not be shown.
				</para>
				
			</section>
			
			<section xml:id="ignore-sql-error">
				<title><code>--* IGNORE SQL ERROR &lt;SQL Error&gt; [, &lt;SQL Error&gt; [, ...]]</code></title>
				
				<para>
					Tells the patchtool to ignore certain sql errors.
					This is useful when you want to do a database change, but you are not sure if it is done already.
					This may happen when using branches or when someone has done some changes manually (which is not recommended).
					Use <code>--* /IGNORE SQL ERROR</code> to end this ignore.
					You can also nest multiple IGNOREs. 
					Use this feature with care.
				</para>
				
			</section>
			
			<section xml:id="set-user">
				<title><code>--* SET USER &lt;username&gt;</code></title>
				
				<para>
					Tells the patchtool to switch to another database user. The patchtool user will be asked for the password automatically when needed.
					Database changes following this will be executed by this user.
					The patchtool switches back to the default user (given on the commandline or put in the configuration) at the start of each individual patch.
					This command is useful when there is no single user available that has enough rights to make modifications on all parts of the database that are upgraded as a whole.
				</para>
				
			</section>
			
			<section xml:id="sessionconfig">
				<title><code>--* SESSIONCONFIG</code></title>
				
				<para>
					Tells the patchtool that statements between this and the ending <code>--* /SESSIONCONFIG</code> should not be regarded as database changes but as patch mode settings.
					Especially useful around <code>ALTER SESSION</code> which changes the mode of the current connection (the current connection is the connection belonging to the current user.)
					Remember that if you change the user with <computeroutput>SET USER</computeroutput> you get another connection, so you may have to repeat the <computeroutput>ALTER SESSION</computeroutput> for each user you change to.
				</para>
				
			</section>
			
			<section xml:id="assert-exists">
				<title><code>ASSERT EXISTS "&lt;failure message&gt;" \n &lt;sql select&gt; \n GO</code></title>
				
				<para>
					This rather exotic command can be used to do checks on an existing database that is not yet managed by the patchtool.
					Its an assertion that behaves like a database change, in the sense that if the assertion is successful then it is skipped in case the patch is restarted for whatever reason.
					Example: 
				</para>

				<example>
					<title>Example ASSERT EXISTS</title>				
<programlisting>--* // Check old style version
ASSERT EXISTS MESSAGE 'Expecting old style version 2.0.17'
SELECT *
FROM TTS.VERSION_CONTROL
WHERE VERS_CONT_ID = 'VERSION'
AND VERS_REG_NUM = 'DHL TTS 2.0.17'
GO</programlisting>
				</example>
				
			</section>
			
		</section>

		<section xml:id="maintaining-branches">
			<title>Maintaining branches</title>
			
			<para>
				In the practice of software development it is common to use a version control system.
				It also common to create a stable branch whenever software needs to be put into production.
				With this you create parallel lines of software development where the stable branch only receives bugfixes whereas the development branch (trunk) receives both bugfixes and new developments.
			</para>
			
			<para>
				With respect to database upgrading there will also come a moment where creation of a branch is inevitable.
				This moment is defined by the need to implement a database change for the stable branch, but changes are already applied to the trunk.
			</para>
			
			<para>
				A branch in the database patchfile is created by adding two patches that spring from the same version, in essence a fork in the path.
				The first patch should be left empty, its only purpose is to jump to a new major/minor version number.
				The second patch contains the changes for the stable branch and is marked with <code>BRANCH</code> instead of <code>PATCH</code>.
				This creates a dead end, so you need to add another patch marked with <code>RETURN</code> which returns the stable branch to the trunk.
			</para>
			
			<para>
				As an example you get the patch header displayed below.
			</para>
			
			<example>
				<title>Example patch header showing a newly created branch</title>
<programlisting><![CDATA[--*	PATCHES
--*     PATCH "" --> "1.0.1"
--*     PATCH "1.0.1" --> "1.0.2"
--*     PATCH "1.0.2" --> "1.0.3"
--*     PATCH "1.0.3" --> "1.0.4"
--*     PATCH "1.0.4" --> "1.0.5"
--*         BRANCH "1.0.5" --> "1.0.6"
--*         RETURN "1.0.6" --> "2.0.1"
--*     PATCH "1.0.5" --> "2.0.1"      // This patch should be left empty
--*	/PATCHES]]></programlisting>
			</example>

			<para>
				It is advisable to leave the indicated patch empty (1.0.5 --> 2.0.1), to make sure that you have a suitable version to return to if needed.
				This makes version 1.0.5 and 2.0.1 of the database identical, which gives the opportunity for the branch to return to an identical database from where it sprung.
				You cannot achieve this by letting the return patch point to version 1.0.5, because circularities are not allowed.
				It is not always required to return to an identical database, but it could happen in order to make the return patch as simple as possible.
				So better safe than sorry.
			</para>
			
			<para>
				As developments on the 2 parallel lines continue, you get more patches on the stable branch and the development branch.
				Whenever a change is added to the branch, one should analyze what to do with the return patch.
				The source side of the return patch always moves along with the evolution of the patches on the branch.
				However, depending on the scenario, the destination side of the return patch may point to any of the 2.0.x versions.
			</para>

			<example>
				<title>Example patch header showing a evolved branch</title>
<programlisting><![CDATA[--*	PATCHES
--*     PATCH "" --> "1.0.1"
--*     PATCH "1.0.1" --> "1.0.2"
--*     PATCH "1.0.2" --> "1.0.3"
--*     PATCH "1.0.3" --> "1.0.4"
--*     PATCH "1.0.4" --> "1.0.5"
--*         BRANCH "1.0.5" --> "1.0.6"
--*         PATCH "1.0.6" --> "1.0.7"
--*         PATCH "1.0.7" --> "1.0.8"
--*         RETURN "1.0.8" --> "2.0.2"
--*     PATCH "1.0.5" --> "2.0.1"      // This patch should be left empty
--*     PATCH "2.0.1" --> "2.0.2"
--*     PATCH "2.0.2" --> "2.0.3"
--*     PATCH "2.0.3" --> "2.0.4"
--*	/PATCHES]]></programlisting>
			</example>

			<note>
				<para>
					As shown in the example above, <code>BRANCH</code> should only be used once to create a branch.
					See <xref linkend="patch-path-resolving" />
				</para>
			</note>

		</section>
		
		<section xml:id="open-patches">
			<title>Open patches</title>
			
			<para>
				As described in <xref linkend="extending-patches" /> you can indicate that a patch is work-in-progress. Example:
			</para>
			
			<example>
				<title>Example patch header showing a open patch</title>
<programlisting><![CDATA[--*	PATCHES
--*     PATCH "" --> "1.0.1"
--*     PATCH "1.0.1" --> "1.0.2"
--*     PATCH "1.0.2" --> "1.0.3"
--*     PATCH "1.0.3" --> "1.0.4"
--*     PATCH OPEN "1.0.4" --> "1.0.5" // This patch is work-in-progress
--*	/PATCHES]]></programlisting>
			</example>

		</section>
		
		<section xml:id="guidelines">
			<title>Guidelines</title>
			
			<para>
				Be careful not to modify patches that have already been applied to a database.
				It is very important that a specific version of a database stays consistent over time.
				When you modify a patch you run the risk that you get 2 databases with equal version numbers but with inconsistent structures.
				Only modify patches in these cases:
			</para>
			
			<itemizedlist>
				<listitem>
					<para>
						Databases that have been patched with the old patch are deleted.
					</para>
				</listitem>
				<listitem>
					<para>
						The old patch and the modified patch result in the same database structure. 
					</para>
				</listitem>
			</itemizedlist>

		</section>
		
	</chapter>
	
	<chapter xml:id="technical-details">
		<title>Technical details</title>
		
		<section xml:id="password-masking">
			<title>Password masking</title>
			
			<para>
				In java 5 it is not possible to mask passwords on the commandline.
				Java 6 introduces a new Console class which will be automatically picked up by the patchtool if available.
				If you are using java 5 to run the patchtool beware that the password will be visible to other persons. 
			</para>
			
		</section>
		
		<section xml:id="patchtool-tables">
			<title>Description of the 2 patchtool tables: DBVERSION and DBVERSIONLOG</title>
		
			<para>
				TODO
			</para>	
			
		</section>
		
		<section xml:id="creating-plugins">
			<title>Creating plugins</title>
		
			<para>
				TODO
			</para>	
			
		</section>
		
		<section xml:id="patch-path-resolving">
			<title>Patch path resolving</title>
		
			<para>
				TODO
			</para>	
			
		</section>
		
	</chapter>

</book>
