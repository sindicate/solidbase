<?xml version="1.0" encoding="ISO-8859-1"?>

<!--
   Copyright 2006 RenÃ© M. de Bloois

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
-->

<project basedir="." name="solidbase" xmlns:maven="antlib:org.apache.maven.artifact.ant">

	<!-- Maven Ant Task -->

	<path id="maventasks.classpath">
		<fileset dir="tools/maven" includes="*.jar" />
	</path>

	<typedef resource="org/apache/maven/artifact/ant/antlib.xml" uri="antlib:org.apache.maven.artifact.ant" classpathref="maventasks.classpath" />

	<path id="maven2.classpath">
		<fileset dir="tools/maven/boot" includes="*.jar" />
	</path>

	<!-- Targets -->

	<!-- 
	<target name="compiletest" depends="compile">
		<mkdir dir="${build.home}/testclasses" />
		<javac source="${target-jre}" target="${target-jre}" srcdir="test/src" destdir="${build.home}/testclasses" debug="true" deprecation="true" optimize="true">
			<classpath refid="compiletest.classpath" />
		</javac>
		<sync todir="${build.home}/testclasses">
			<fileset dir="test/src" excludes="**/*.java" />
			<preserveInTarget includes="**/*.class" />
		</sync>
		<sync todir="${build.home}/test">
			<fileset dir="test" excludes="src/**,lib/**" />
		</sync>
	</target>

	<target name="jar" depends="compile">
		<fail message="A *.txt file is missing">
			<condition>
				<resourcecount when="ne" count="3">
					<fileset dir="." includes="LICENSE.txt,NOTICE.txt,CHANGELOG.TXT" />
				</resourcecount>
			</condition>
		</fail>
		<mkdir dir="${build.home}/config" />
		<!- TODO This echo causes the jar file to be rebuilt again and again ->
		<echo file="${build.home}/config/version.properties" message="solidbase.version=${release.number}" />
		<mkdir dir="${dist.home}" />
		<jarjar compress="yes" destfile="${dist.home}/solidbase.jar">
			<zipfileset dir="${build.home}/classes" excludes="solidbase/version.properties" />
		    <!- <zipfileset dir="${build.home}/../solidstack/classes" excludes="solidbase/version.properties" /> ->
		    <zipfileset src="lib/solidstack.jar" excludes="META-INF/**" />
			<zipfileset file="${build.home}/config/version.properties" prefix="solidbase" />
			<zipfileset src="lib/commons-cli-1.2.jar" excludes="META-INF/**" />
			<zipfileset src="lib/commons-lang3-3.4.jar" excludes="META-INF/**" />
			<zipfileset src="lib/commons-primitives-1.0.jar" excludes="META-INF/**" />
			<zipfileset dir="." includes="LICENSE.txt,NOTICE.txt,CHANGELOG.TXT" prefix="META-INF" />
			<rule pattern="org.apache.commons.**" result="solidbase.commons.@1" />
			<rule pattern="solidstack.**" result="solidbase.solidstack.@1" />
			<keep pattern="solidbase.**" />
			<manifest>
				<attribute name="Implementation-Title" value="SolidBase" />
				<attribute name="Implementation-Version" value="${release.number}" />
				<attribute name="Implementation-Vendor-Id" value="org.solidbase" />
				<attribute name="Main-Class" value="solidbase.Main" />
				<attribute name="Version" value="${release.number}" />
				<attribute name="Project-Name" value="${ant.project.name}" />
				<attribute name="Built-By" value="${user.name}" />
				<attribute name="Target-JRE" value="${target-jre}" />
				<!-
				<attribute name="SVN-url" value="${svn.url}" />
				<attribute name="SVN-revision" value="${svn.committedRevision}" />
				->
			</manifest>
		</jarjar>
	</target>

	<target name="dist" depends="clean,test,build" description="Complete build process to create the distribution files">
		<fail>
			<condition>
				<resourcecount when="ne" count="8">
					<fileset dir="${dist.home}" includes="build.xml,upgrade-*-example.sql,hsqldb.jar,solidbase.jar,solidbase.properties" />
				</resourcecount>
			</condition>
		</fail>
		<echo message="Distribution files created in ${dist.home}" />
	</target>

	<target name="javadoc" depends="compile" description="Generate Javadoc">
		<mkdir dir="doc/api" />
		<delete dir="doc/api" includes="**/*" />
		<javadoc sourcepath="src" destdir="doc/api" packagenames="*" linkoffline="http://java.sun.com/j2se/1.5.0/docs/api doc/jdk1.5.0">
			<classpath refid="compile.classpath" />
		</javadoc>
		<replaceregexp match="- Generated by javadoc [^\-]+-" replace="- Generated by javadoc -" flags="g" byline="true">
			<fileset dir="doc/api" includes="**/*.html" />
		</replaceregexp>
		<replaceregexp match="&lt;META NAME=&quot;date&quot; CONTENT=&quot;[\d\-]+&quot;&gt;" replace="" flags="g" byline="true">
			<fileset dir="doc/api" includes="**/*.html" />
		</replaceregexp>
	</target>

	<target name="manual">
		<echo message="NOTE: You can use 'ant -autoproxy &lt;target&gt;' when you have network problems" />
		<java jar="tools/jing/jing.jar" fork="true">
			<arg value="-t" />
			<arg value="-i" />
			<arg path="tools/docbook/docbook.rng" />
			<arg path="doc/manual.xml" />
		</java>
		<mkdir dir="${build.home}" />
		<mkdir dir="${dist.home}" />
		<xslt style="tools/docbook/xhtml/docbook.xsl" in="doc/manual.xml" out="${dist.home}/manual.html" classpathref="xalan.classpath" />
		<xslt style="tools/docbook/fo/docbook.xsl" in="doc/manual.xml" out="${build.home}/manual.fo" classpathref="xalan.classpath" />
		<fop format="application/pdf" fofile="${build.home}/manual.fo" outfile="${dist.home}/manual.pdf" />
	</target> -->

	<path id="jar.classpath">
		<fileset dir="build/libs" includes="solidbase-all.jar" />
		<fileset dir="test/lib" includes="hsqldb*.jar" />
	</path>

	<target name="test-ant-task" depends="shadowJar">
		<taskdef resource="solidbasetasks" classpathref="jar.classpath" />
		<solidbase-upgrade driver="org.hsqldb.jdbcDriver" url="jdbc:hsqldb:mem:testJson" username="sa" password="" upgradefile="build/testhome/testpatch-multiconnections.sql" target="1.0.*">
			<secondary name="queues" url="jdbc:hsqldb:mem:queues" username="sa" password="geheim" />
			<secondary name="user" username="sa" password="" />
		</solidbase-upgrade>
	</target>

	<!-- <target name="sonar" depends="test,build">
		<property name="sonar.sources" value="src" />

		<!- list of optional Sonar properties ->
		<property name="sonar.projectName" value="this value overrides the name defined in Ant root node" />
		<property name="sonar.binaries" value="list of directories which contain for example the Java bytecode" />
		<property name="sonar.tests" value="list of test source directories separated by a comma" />
		<property name="sonar.libraries" value="list of paths to libraries separated by a comma (These libraries are for example used by the Sonar Findbugs plugin)" />
	 
	    <sonar:sonar key="solidbase:solidbase" version="2.0.0-beta4" xmlns:sonar="antlib:org.sonar.ant" />
	</target>

	<target name="maven-deploy" depends="build" description="Deploys to the remote repo">
		<maven:deploy file="${dist.home}/solidbase.jar">
			<pom file="deploy-pom.xml" />
		</maven:deploy>
	</target>

	<target name="maven-install" depends="build" description="Deploys to the local repo">
		<maven:install file="${dist.home}/solidbase.jar">
			<pom file="deploy-pom.xml" />
		</maven:install>
	</target>

	<target name="maven:release">
		<replaceregexp file="pom.xml" match="&lt;version&gt;(\w|\.|-)*&lt;/version&gt;" replace="&lt;version&gt;${release.number}&lt;/version&gt;" />
		<replaceregexp file="src/META-INF/maven/plugin.xml" match="&lt;version&gt;(\w|\.|-)*&lt;/version&gt;" replace="&lt;version&gt;${release.number}&lt;/version&gt;" />
	</target>
	-->

	<!-- This will delete all files but not the folders. Use this when you want to integrate a new version of the docbook xsl tool -->
	<!-- <target name="delete-docbook-tool">
		<delete>
			<fileset dir="tools/docbook" includes="**/*" />
		</delete>
	</target> -->

	<!-- Example maven macro
	<macrodef name="maven">
		<attribute name="options" default="" />
		<attribute name="goal" />
		<attribute name="basedir" />
		<attribute name="resultproperty" default="maven.result" />
		<element name="args" implicit="true" optional="true" />
		<sequential>
			<java classname="org.codehaus.classworlds.Launcher" fork="true" dir="@{basedir}" resultproperty="@{resultproperty}">
				<jvmarg value="-Xmx512m" />
				<classpath>
	  				<fileset dir="${maven.home}/boot">
						<include name="*.jar" />
	  				</fileset>
	  				<fileset dir="${maven.home}/lib">
						<include name="*.jar" />
	  				</fileset>
				</classpath>
				<sysproperty key="classworlds.conf" value="${maven.home}/bin/m2.conf" />
				<sysproperty key="maven.home" value="${maven.home}" />
				<arg line="-B @{options} @{goal}" />
	  		</java>
		</sequential>
	</macrodef>
	
	<maven basedir="${basedir}" options="${maven.opts}" goal="install" resultproperty="maven.build.result" />
	-->

	<target name="test-maven-plugin">
		
		<!-- Deploy -->
		<mkdir dir="${build.home}/userhome" /> <!-- Will contain the local maven repo -->
		<delete dir="${build.home}/userhome/.m2/repository/solidbase" /> <!-- Remove solidbase from the local repo -->
		<delete dir="${build.home}/remote" /> <!-- Delete the remote repo -->
		<maven:deploy file="${build.home}/libs/solidbase-all.jar"> <!-- Deploy to the remote repo -->
			<pom file="deploy-pom.xml" />
			<remoterepository url="file:///${build.home}/remote" />
			<localrepository path="${build.home}/userhome/.m2/repository" />
		</maven:deploy>
		<delete dir="${build.home}/userhome/.m2/repository/solidbase" /> <!-- Remove solidbase from the local repo -->
		
		<echo message="Running a maven upgrade and sql script (invisible)" />

		<!-- Test with our own private maven tool -->
		<java dir="maven-plugin/test" classname="org.codehaus.classworlds.Launcher" classpathref="maven2.classpath" fork="yes" failonerror="yes">
			<jvmarg value="-Dclassworlds.conf=${basedir}/tools/maven/bin/m2.conf" />
			<jvmarg value="-Duser.home=${build.home}/userhome" /> <!-- Use our own user folder -->
			<jvmarg value="-Dmaven.home=${basedir}/tools/maven" />
			<jvmarg value="-Dtest.repo.url=file:///${build.home}/remote" /> <!-- Used in the pom.xml -->
			<jvmarg value="-DskipDatabase=false" /> <!-- Used in the pom.xml -->
			<arg value="--batch-mode" />
			<arg value="solidbase:upgrade" />
			<arg value="solidbase:sql" />
		</java>
		
	</target>
	
	<!-- <target name="docbook2wiki" depends="compile">
		<groovy src="scripts/docbook2wiki.groovy" classpath="${build.home}/classes" />
	</target> -->

	<!-- <target name="gettingstarted" depends="clean,build">
		<groovy src="scripts/GenerateGettingStarted.groovy" />
	</target> -->

</project>
