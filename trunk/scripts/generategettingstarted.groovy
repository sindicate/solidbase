println "Generating the Getting Started..."





def definition1 = """--* DEFINITION
--*     INIT "" --> "1.1"
--* /DEFINITION
"""

def init = """--* INIT "" --> "1.1"

--* SECTION "Creating table DBVERSION"

CREATE TABLE DBVERSION
(
    SPEC VARCHAR(5),
    VERSION VARCHAR(20),
    TARGET VARCHAR(20),
    STATEMENTS DECIMAL(4) NOT NULL
)
GO

--* SECTION "Creating table DBVERSIONLOG"

CREATE TABLE DBVERSIONLOG
(
    TYPE VARCHAR(1) NOT NULL,
    SOURCE VARCHAR(20),
    TARGET VARCHAR(20) NOT NULL,
    STATEMENT DECIMAL(4) NOT NULL,
    STAMP TIMESTAMP NOT NULL,
    COMMAND VARCHAR(4000),
    RESULT VARCHAR(4000)
)
GO

CREATE INDEX DBVERSIONLOG_INDEX1 ON DBVERSIONLOG ( TYPE, TARGET )
GO

--* /INIT
"""

def definition2 = """--* DEFINITION
--*     INIT "" --> "1.1"
--*     UPGRADE "" --> "1.0.1"
--* /DEFINITION
"""

def upgrade1 = """--* UPGRADE "" --> "1.0.1"

--* SECTION "Creating table USERS"

CREATE TABLE USERS
(
    USER_ID INT NOT NULL GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    USER_USERNAME VARCHAR(26) NOT NULL,
    USER_PASSWORD VARCHAR(30) NOT NULL
)
GO

--* /UPGRADE
"""

def definition3 = """--* DEFINITION
--*     INIT "" --> "1.1"
--*     UPGRADE "" --> "1.0.1"
--*     UPGRADE "1.0.1" --> "1.0.2"
--* /DEFINITION
"""

def upgrade2 = """--* UPGRADE "1.0.1" --> "1.0.2"

--* SECTION "Inserting admin user"

INSERT INTO USERS ( USER_USERNAME, USER_PASSWORD ) VALUES ( 'admin', '*****' )
GO

--* SECTION "Inserting user"

INSERT INTO USERS ( USER_USERNAME, USER_PASSWORD ) VALUES ( 'rené', '*****' )
GO

--* /UPGRADE
"""

def props = """properties-version = 1.0

# add jars to the classpath
classpath.ext = derby-10.5.3.0.jar

# primary connection
connection.driver = org.apache.derby.jdbc.EmbeddedDriver
"""




def execute( String command, File folder, String input, out )
{
	out << "${folder}>${command}\n"
	if( command == "dir" )
		command = "cmd /c dir"
	String[] args = command.split( " " )
	process = new ProcessBuilder( args ).directory( folder ).redirectErrorStream( true ).start()
	if( input )
		process.outputStream << input
	out << process.inputStream.text
	out << "\n${folder}>\n"
	process.waitFor()
}




def home = properties."build.home"
def temp = new File( "${home}/TEMP" )
ant.delete( dir: temp )
ant.mkdir( dir: temp )
ant.copy( file: "${home}/dist/solidbase.jar", todir: "${home}/TEMP", preservelastmodified: true )
ant.copy( todir: temp, preservelastmodified: true ) { fileset( dir: "${home}/dist", includes: "derby*.jar" ) }
def upgradefile = new File( "${temp}/test-upgrade.sql" )

new File( "${home}/gettingstarted.wiki" ).withPrintWriter
{
	out ->
	out << """#summary Getting Started with SolidBase on the command-line.

(Use !SolidBase 1.6.0 or newer.)

To start using !SolidBase on the command line put solidbase.jar in a folder of your choosing. Get the driver jar for your database and put it in the same folder. Your folder now looks like:

{{{
"""
	execute( "dir", temp, null, out )
	upgradefile.text = "${definition1}\n\n\n${init}"
	out << """}}}

Create an upgrade script for the database. The upgrade script starts with a definition and an initialization to create the required tables that !SolidBase needs.

test-upgrade.sql:
{{{
${upgradefile.text}}}}

Version 1.1 indicates to !SolidBase what the structure is of the DBVERSION and DBVERSIONLOG tables. So you shouldn't change that. The folder now looks like:

{{{
"""
	execute( "dir", temp, null, out )
	out << """}}}

Run the following command:

{{{
java -jar solidbase.jar
}}}

You get the following output:

{{{
"""
	execute( "java -jar solidbase.jar", temp, null, out )
	out << """}}}

In this help page you see that you need to specify the -driver, -url, -username and -upgradefile:

{{{
"""
	execute( "java -jar solidbase.jar -driver org.apache.derby.jdbc.EmbeddedDriver -url jdbc:derby:test;create=true -username app -upgradefile test-upgrade.sql", temp, null, out )
	out << """}}}

But this is not right. We have to add the driver jar to the classpath. When using Ant or Maven you can use Ant or Maven techniques. When using the solidbase.properties file you can do that in there (shown below). But now we have to use the java way like this (press enter when asked for the password):

{{{
"""
	execute( "java -cp solidbase.jar;derby-10.5.3.0.jar solidbase.Main -driver org.apache.derby.jdbc.EmbeddedDriver -url jdbc:derby:test;create=true -username app -upgradefile test-upgrade.sql", temp, "\n", out )
	upgradefile.text = "${definition2}\n\n\n${init}\n\n\n${upgrade1}"
	out << """}}}

So what happened here? The database has no version yet. This is recognized as "no version". !SolidBase always checks if the current version exists in the upgrade file, because if not, this means that this version is either deprecated (removed from the upgrade file) or an upgrade file is used that does not belong to the database.

We need to add an upgrade path to the upgrade file. The result might look like this:

{{{
${upgradefile.text}}}}

When you repeat the previous command you get:

{{{
"""
	execute( "java -cp solidbase.jar;derby-10.5.3.0.jar solidbase.Main -driver org.apache.derby.jdbc.EmbeddedDriver -url jdbc:derby:test;create=true -username app -upgradefile test-upgrade.sql", temp, "\n", out )
	out << """}}}

!SolidBase works incremental. You can add a change to the upgrade file and run !SolidBase again. Add the following to the upgrade file:

{{{
${upgrade2}}}}

You get the following result:

{{{
"""
	upgradefile.text = "${definition2}\n\n\n${init}\n\n\n${upgrade1}\n\n\n${upgrade2}"
	execute( "java -cp solidbase.jar;derby-10.5.3.0.jar solidbase.Main -driver org.apache.derby.jdbc.EmbeddedDriver -url jdbc:derby:test;create=true -username app -upgradefile test-upgrade.sql", temp, "\n", out )
	out << """}}}

Problem is, we only added the change itself, but forgot to define it. The definition in the top of the file is needed to give a better overview of the contents of the upgrade. Change the definition to this:

{{{
${definition3}}}}

If you run the upgrade again, you get:

{{{
"""
	upgradefile.text = "${definition3}\n\n\n${init}\n\n\n${upgrade1}\n\n\n${upgrade2}"
	execute( "java -cp solidbase.jar;derby-10.5.3.0.jar solidbase.Main -driver org.apache.derby.jdbc.EmbeddedDriver -url jdbc:derby:test;create=true -username app -upgradefile test-upgrade.sql", temp, "\n", out )
	out << """}}}

Below we are going to use the solidbase.properties file to set some default properties. This makes the command-line version of !SolidBase easier to use.

When a solidbase.properties file is found in the working folder, it will be read automatically. You can add default values for certain properties in it, for example the extra jars and the driver class name. Add a solidbase.properties file:

{{{
${props}}}}

The folder now looks like:

{{{
"""
	new File( "${temp}/solidbase.properties" ).text = props
	execute( "dir", temp, null, out )
	out << """}}}

Now we can remove the -classpath and the -driver arguments from the commandline:

{{{
"""
	execute( "java -jar solidbase.jar -url jdbc:derby:test;create=true -username app -upgradefile test-upgrade.sql", temp, "\n", out )
	out << """}}}

This concludes the Getting Started with the command line version of !SolidBase.

Have a happy time playing with !SolidBase!
"""
}
